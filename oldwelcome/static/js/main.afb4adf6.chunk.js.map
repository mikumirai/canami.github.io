{"version":3,"sources":["configs/rem.js","router/index.js","App.js","serviceWorker.js","index.js"],"names":["doc","win","docEl","documentElement","resizeEvt","window","recalc","clientWidth","style","fontSize","addEventListener","document","Home","lazy","Resume","Error","routes","path","exact","component","App","className","fallback","routers","map","route","key","render","props","Component","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4KAAA,SAAWA,EAAKC,GACZ,IAAIC,EAAQF,EAAIG,gBACZC,EAAY,sBAAuBC,OAAS,oBAAsB,SAClEC,EAAS,WACL,IAAIC,EAAcL,EAAMK,YACnBA,IACLL,EAAMM,MAAMC,SAAkBF,EAAc,IAArB,IAA4B,OAEtDP,EAAIU,mBACTT,EAAIS,iBAAiBN,EAAWE,GAAQ,GACxCN,EAAIU,iBAAiB,mBAAoBJ,GAAQ,IAVrD,CAWGK,SAAUN,S,qKCTPO,EAAOC,gBAAK,kBAAM,uDAClBC,EAASD,gBAAK,kBAAM,uDACpBE,EAAQF,gBAAK,kBAAM,iCAWVG,EARA,CACb,CAACC,KAAM,IAAKC,OAAO,EAAMC,UAAWP,GACpC,CAACK,KAAM,UAAWC,OAAO,EAAMC,UAAWL,GAC1C,CAACG,KAAM,cAAeC,OAAO,EAAMC,UALlBN,gBAAK,kBAAM,kCAM5B,CAACI,KAAM,QAASC,OAAO,EAAMC,UALlBN,gBAAK,kBAAM,kCAMtB,CAACK,OAAO,EAAMC,UAAWJ,ICHNK,G,6KAEb,OACI,kBAAC,IAAD,KACI,yBAAKC,UAAU,OAEX,kBAAC,WAAD,CAAUC,SAAU,+BAChB,kBAAC,IAAD,KACKC,EAAQC,KAAI,SAACC,EAAOC,GACjB,OAAID,EAAMP,MACE,kBAAC,IAAD,CAAOQ,IAAKA,EAAKR,OAAK,EAACD,KAAMQ,EAAMR,KAAMU,OAAQ,SAAAC,GAAK,OAC1D,kBAACH,EAAMN,UAAP,iBAAqBS,EAArB,CAA4BZ,OAAQS,EAAMT,aAK1C,kBAAC,IAAD,CAAOU,IAAKA,EAAKT,KAAMQ,EAAMR,KAAMU,OAAQ,SAAAC,GAAK,OAC5C,kBAACH,EAAMN,UAAP,iBAAqBS,EAArB,CAA4BZ,OAAQS,EAAMT,wB,GAjBrDa,cCGbC,QACa,cAA7BzB,OAAO0B,SAASC,UAEa,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACrB,2D,wBCDRC,IAASP,OAAO,kBAAC,EAAD,MAAQhB,SAASwB,eAAe,SDkHxC,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.afb4adf6.chunk.js","sourcesContent":["(function (doc, win) {\r\n    var docEl = doc.documentElement,\r\n        resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\r\n        recalc = function () {\r\n            var clientWidth = docEl.clientWidth;\r\n            if (!clientWidth) return;\r\n            docEl.style.fontSize = 100 * (clientWidth / 375) + 'px';\r\n        };\r\n    if (!doc.addEventListener) return;\r\n    win.addEventListener(resizeEvt, recalc, false);\r\n    doc.addEventListener('DOMContentLoaded', recalc, false);\r\n})(document, window);","import {lazy} from 'react';\r\n\r\nconst Home = lazy(() => import('../../src/pages/Home/Home'));\r\nconst Resume = lazy(() => import('../pages/Resume/Resume'));\r\nconst Error = lazy(() => import('../../src/pages/Error/Error'));\r\nconst Navigation = lazy(() => import('../pages/Navigation/Navigation'));\r\nconst Test = lazy(() => import('../pages/Test/Test'));\r\nconst routes = [\r\n  {path: '/', exact: true, component: Home},\r\n  {path: '/resume', exact: true, component: Resume},\r\n  {path: '/navigation', exact: true, component: Navigation},\r\n  {path: '/test', exact: true, component: Test},\r\n  {exact: true, component: Error},\r\n];\r\n\r\nexport default routes;\r\n","import React, {Component,Suspense} from 'react';\r\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport routers from \"./router/index\";\r\n\r\n//引入公共样式\r\nimport \"./App.scss\";\r\n\r\n\r\n\r\nexport default class App extends Component {\r\n    render() {\r\n        return (\r\n            <Router >\r\n                <div className=\"App\">\r\n                    {/*引入路由*/}\r\n                    <Suspense fallback={<div></div>}>\r\n                        <Switch>\r\n                            {routers.map((route, key) => {\r\n                                if (route.exact) {\r\n                                    return (<Route key={key} exact path={route.path} render={props => (\r\n                                        <route.component {...props} routes={route.routes}/>\r\n                                    )}\r\n                                    />);\r\n                                } else {\r\n                                    return (\r\n                                        <Route key={key} path={route.path} render={props => (\r\n                                            <route.component {...props} routes={route.routes}/>\r\n                                        )}\r\n                                        />);\r\n                                }\r\n                            })}\r\n                        </Switch>\r\n                    </Suspense>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached Content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // Content until all client tabs are closed.\r\n                            console.log(\r\n                                'New Content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n//引入rem\r\nimport \"./configs/rem\";\r\n\r\n//引入动画库\r\nimport \"./styles/animate.css\";\r\n\r\n//引入字体库\r\nimport \"./styles/font/iconfont.css\";\r\n\r\n//引入antd样式\r\nimport \"antd/dist/antd.min.css\";\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}