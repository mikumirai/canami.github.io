{"version":3,"sources":["pages/Notes/Notes.module.scss","pages/Home/Home.jsx","router/index.js","pages/Notes/Notes.jsx","pages/Error/Error.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","href","Component","routes","path","exact","component","Home","className","styles","leftPlan","lg","span","rightPlan","App","routers","map","route","key","render","props","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,SAAW,wBAAwB,UAAY,2B,wLCWlDC,E,iLARP,OACI,6BACI,uBAAGC,KAAK,2CAAR,iC,GAJKC,a,iDCQNC,EANA,CACX,CAACC,KAAM,IAAKC,OAAO,EAAMC,UAAWC,GACpC,CAACH,KAAM,SAAUC,OAAO,EAAMC,U,iLCD1B,OACI,6BACI,2BACI,uBAAKE,UAAWC,IAAOC,SAAUC,GAAI,EAAGC,KAAM,GAA9C,SAGA,uBAAKJ,UAAWC,IAAOI,UAAWD,KAAM,IAAxC,kB,GARCV,cDIjB,CAACG,OAAO,EAAMC,U,iLEHV,OACI,6BAEI,yE,GALKJ,eCKAY,G,uLAEb,OACI,kBAAC,IAAD,KACI,yBAAKN,UAAU,OAEX,kBAAC,IAAD,KACKO,EAAQC,KAAI,SAACC,EAAOC,GACjB,OAAID,EAAMZ,MACE,kBAAC,IAAD,CAAOa,IAAKA,EAAKb,OAAK,EAACD,KAAMa,EAAMb,KAAMe,OAAQ,SAAAC,GAAK,OAC1D,kBAACH,EAAMX,UAAP,iBAAqBc,EAArB,CAA4BjB,OAAQc,EAAMd,aAK1C,kBAAC,IAAD,CAAOe,IAAKA,EAAKd,KAAMa,EAAMb,KAAMe,OAAQ,SAAAC,GAAK,OAC5C,kBAACH,EAAMX,UAAP,iBAAqBc,EAArB,CAA4BjB,OAAQc,EAAMd,uB,GAhBjDD,cCKbmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.917cc567.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftPlan\":\"Notes_leftPlan__1_UK2\",\"rightPlan\":\"Notes_rightPlan__g6BqA\"};","import React, {Component} from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <a href=\"https://mikumirai.github.io/mylog/index\">我的博客</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import Home from \"../../src/pages/Home/Home\";\r\nimport Notes from \"../../src/pages/Notes/Notes\";\r\nimport Error from \"../../src/pages/Error/Error\";\r\n\r\nconst routes = [\r\n    {path: \"/\", exact: true, component: Home},\r\n    {path: \"/notes\", exact: true, component: Notes},\r\n    {exact: true, component: Error},\r\n];\r\n\r\nexport default routes;","import React, {Component} from 'react';\r\nimport {Row, Col} from \"antd\";\r\nimport styles from \"./Notes.module.scss\"\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col className={styles.leftPlan} lg={4} span={0}>\r\n                        12321\r\n                    </Col>\r\n                    <Col className={styles.rightPlan} span={20}>\r\n                        21312321\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <h2>404页面未找到...</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport routers from \"./router/index\";\n\n//引入公共样式\nimport \"./App.css\";\n\nexport default class App extends Component {\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    {/*引入路由*/}\n                    <Switch>\n                        {routers.map((route, key) => {\n                            if (route.exact) {\n                                return (<Route key={key} exact path={route.path} render={props => (\n                                    <route.component {...props} routes={route.routes}/>\n                                )}\n                                />);\n                            } else {\n                                return (\n                                    <Route key={key} path={route.path} render={props => (\n                                        <route.component {...props} routes={route.routes}/>\n                                    )}\n                                    />);\n                            }\n                        })}\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}